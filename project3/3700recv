#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


MSG_SIZE = 1500
TIMEOUT = 30
mySequence = 0

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

#teardown
def teardown():
    global mySequence

    while True:
        # Send back a nack to the sender
        msg = json.dumps({'teardown': ''})
        log("ABOUT TO SEND " + msg)
        if sock.sendto(msg, addr) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[teardown]")
            ready = select.select([sock], [], [], 1)
            if ready[0]:
                log("[recv] received packet")
                result = sock.recv(MSG_SIZE)
                try:
                    decoded = json.loads(result)

                    if "teardown" in str(decoded):
                        sys.exit(0)

                except (ValueError, KeyError, TypeError):
                    log("[recv corrupt packet]")




# Now listen for packets
while True:
    result = sock.recvfrom(15000)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data)

         # If the EOF flag is set, exit
            if decoded['eof']:
                if mySequence == int(decoded['sequence']):
                    log("[completed]")
                    teardown()
                else:
                    # Send back a nack to the sender
                    msg = json.dumps({"nack": mySequence})
                    log("ABOUT TO SEND " + msg)
                    if sock.sendto(msg, addr) < len(msg):
                        log("[error] unable to fully send packet")

            # If there is data, we accept it and print it out if it's the data we need
            if (decoded['data'] != ''):

                if mySequence == int(decoded['sequence']):
                    log("[recv data] " + str(decoded['sequence']) + " (" + str(
                        len(decoded['data'])) + ") ACCEPTED (in-order)")
                    sys.stdout.write(decoded['data'])
                    mySequence += len(decoded['data'])

                else:
                    # Send back a nack to the sender
                    msg = json.dumps({"nack": mySequence})
                    log("ABOUT TO SEND " + msg)
                    if sock.sendto(msg, addr) < len(msg):
                        log("[error] unable to fully send packet")


        except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")

    else:
        log("[error] timeout")
        sys.exit(-1)
